# -*- coding: utf-8 -*-
"""task3_station_panel.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1otVFH5TANqBM7fOIaXYbb8cy1sITwOox
"""

!pip install openpyxl

from google.colab import files
uploaded = files.upload()

!ls

!pip install xlrd

import pandas as pd

df = pd.read_excel("multi-year-station-entry-and-exit-figures.xls", engine="xlrd")
print(df.head())

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

!ls

import pandas as pd

xls = pd.ExcelFile("multi-year-station-entry-and-exit-figures.xls", engine="xlrd")
print(xls.sheet_names)

['2007', '2008', '2009-10', '2010', ...]

import os, shutil
os.makedirs("data", exist_ok=True)
shutil.move("multi-year-station-entry-and-exit-figures.xls", "data/multi-year-station-entry-and-exit-figures.xls")

import re

frames = []
for sh in xls.sheet_names:
    m = re.search(r"(20\d{2})", sh)
    if not m:  # skip sheets without a year
        continue
    year = int(m.group(1))
    if 2007 <= year <= 2017:
        df_y = pd.read_excel(xls, sheet_name=sh, engine="xlrd")
        # Normalize columns
        df_y.columns = [str(c).strip().lower().replace("\n"," ") for c in df_y.columns]
        # Find station + entry/exit cols
        station_col = next((c for c in df_y.columns if "station" in c), None)
        entries_col = next((c for c in df_y.columns if "entries" in c and "exit" not in c), None)
        exits_col = next((c for c in df_y.columns if "exits" in c), None)
        if station_col and entries_col and exits_col:
            df_y["entries_exits"] = pd.to_numeric(df_y[entries_col], errors="coerce") + pd.to_numeric(df_y[exits_col], errors="coerce")
            df_y = df_y[[station_col, "entries_exits"]].rename(columns={station_col:"station"})
            df_y["year"] = year
            frames.append(df_y)

panel = pd.concat(frames, ignore_index=True)
panel["station_norm"] = panel["station"].str.strip().str.lower()

print(panel.head())

xls.sheet_names

import pandas as pd, re

EXCEL_PATH = "multi-year-station-entry-and-exit-figures.xls"  # uploaded filename

xls = pd.ExcelFile(EXCEL_PATH, engine="xlrd")
print("Sheets:", xls.sheet_names)

frames = []

def norm(s):
    return str(s).strip().lower().replace("\n"," ").replace("  "," ")

for sh in xls.sheet_names:
    # pick sheets that contain a 4-digit year and the words Entry/Exit
    m = re.search(r"(20\d{2})", sh)
    if not m or "entry" not in sh.lower():
        continue
    year = int(m.group(1))
    if not (2007 <= year <= 2017):
        continue

    # read a small preview to find the header row that contains 'Station'
    prev = pd.read_excel(xls, sheet_name=sh, nrows=20, engine="xlrd")
    header_row = None
    for i, row in prev.iterrows():
        if any(str(v).strip().lower() == "station" for v in row.values):
            header_row = i
            break

    df_y = pd.read_excel(xls, sheet_name=sh, header=header_row, engine="xlrd") if header_row is not None \
           else pd.read_excel(xls, sheet_name=sh, engine="xlrd")

    # normalize column names
    df_y = df_y.rename(columns={c: norm(c) for c in df_y.columns})

    # find columns
    station_col = next((c for c in df_y.columns if c.startswith("station")), None)
    # separate entries/exits
    entries_col = next((c for c in df_y.columns if c == "entries" or c.startswith("entries ")), None)
    exits_col   = next((c for c in df_y.columns if c == "exits"   or c.startswith("exits ")),   None)
    # combined column variants (e.g., "entries and exits", "entries & exits")
    combined_col = next((c for c in df_y.columns if "entries" in c and "exit" in c), None)

    if combined_col:
        df_y["entries_exits"] = pd.to_numeric(df_y[combined_col], errors="coerce")
    elif entries_col and exits_col:
        df_y["entries_exits"] = pd.to_numeric(df_y[entries_col], errors="coerce") + \
                                pd.to_numeric(df_y[exits_col],   errors="coerce")
    else:
        print(f"⚠️ Skipping sheet {sh}: couldn’t find entries/exits columns. Columns: {list(df_y.columns)[:10]}")
        continue

    if not station_col:
        print(f"⚠️ Skipping sheet {sh}: no station column. Columns: {list(df_y.columns)[:10]}")
        continue

    out = df_y[[station_col, "entries_exits"]].rename(columns={station_col: "station"}).copy()
    out["year"] = year
    frames.append(out)

if not frames:
    raise ValueError("No usable sheets found. Check columns in the Excel file.")

panel = pd.concat(frames, ignore_index=True)
panel["station_norm"] = panel["station"].astype(str).str.strip().str.lower()

print(panel.head(), "\nRows:", len(panel), "Years:", sorted(panel['year'].unique()))

import pandas as pd

EXCEL_PATH = "multi-year-station-entry-and-exit-figures (1).xls"  # 👈 use the exact name shown by !ls
xls = pd.ExcelFile(EXCEL_PATH, engine="xlrd")
print(xls.sheet_names)

import pandas as pd

EXCEL_PATH = "multi-year-station-entry-and-exit-figures.xls"  # 👈 use the exact name shown by !ls
xls = pd.ExcelFile(EXCEL_PATH, engine="xlrd")
print(xls.sheet_names)

import pandas as pd, re

EXCEL_PATH = "data/multi-year-station-entry-and-exit-figures.xls"   # 👈 updated path

xls = pd.ExcelFile(EXCEL_PATH, engine="xlrd")
print("Sheets:", xls.sheet_names)

import pandas as pd, re

# --- build panel from sheets named like "2017 Entry & Exit" ---
frames = []

def norm(s):
    return str(s).strip().lower().replace("\n"," ").replace("  "," ")

for sh in xls.sheet_names:
    m = re.search(r"(20\d{2})", sh)
    if not m or "entry" not in sh.lower():
        continue
    year = int(m.group(1))
    if not (2007 <= year <= 2017):
        continue

    # detect header row (look for a row that contains the word "Station")
    preview = pd.read_excel(xls, sheet_name=sh, nrows=25, engine="xlrd")
    header_row = None
    for i, row in preview.iterrows():
        if any(str(v).strip().lower() == "station" for v in row.values):
            header_row = i
            break

    df_y = pd.read_excel(xls, sheet_name=sh, header=header_row, engine="xlrd") if header_row is not None \
           else pd.read_excel(xls, sheet_name=sh, engine="xlrd")

    # normalize columns
    df_y = df_y.rename(columns={c: norm(c) for c in df_y.columns})

    # locate columns
    station_col = next((c for c in df_y.columns if c.startswith("station")), None)
    entries_col = next((c for c in df_y.columns if c == "entries" or c.startswith("entries ")), None)
    exits_col   = next((c for c in df_y.columns if c == "exits"   or c.startswith("exits ")),   None)
    combined_col = next((c for c in df_y.columns if "entries" in c and "exit" in c), None)

    if not station_col:
        print(f"⚠️  Skipping {sh}: no 'Station' column. Columns: {list(df_y.columns)[:8]}")
        continue

    # compute total entries+exits
    if combined_col:
        df_y["entries_exits"] = pd.to_numeric(df_y[combined_col], errors="coerce")
    elif entries_col and exits_col:
        df_y["entries_exits"] = pd.to_numeric(df_y[entries_col], errors="coerce") + \
                                pd.to_numeric(df_y[exits_col],   errors="coerce")
    else:
        print(f"⚠️  Skipping {sh}: no entries/exits columns. Columns: {list(df_y.columns)[:8]}")
        continue

    out = df_y[[station_col, "entries_exits"]].rename(columns={station_col: "station"}).copy()
    out["year"] = year
    frames.append(out)

# combine years
panel = pd.concat(frames, ignore_index=True)
panel["station_norm"] = panel["station"].astype(str).str.strip().str.lower()
print("Panel rows:", len(panel), "Years:", sorted(panel['year'].unique())[:3], "…", sorted(panel['year'].unique())[-3:])
panel.head()

# lines/stations from Task 2
lines = pd.read_csv("data/line_stations.csv")
lines.columns = [c.strip().lower() for c in lines.columns]
lines["station_norm"] = lines["station_name"].astype(str).str.strip().str.lower()

lines_2025 = (
    lines.groupby("station_norm")["line_name"]
         .agg(lambda x: sorted(set(x)))
         .reset_index()
         .rename(columns={"line_name": "which_lines_2025"})
)
lines_2025["n_lines_2025"] = lines_2025["which_lines_2025"].apply(len)

final_df = panel.merge(lines_2025, on="station_norm", how="left")
final_df = final_df[["station", "year", "entries_exits", "n_lines_2025", "which_lines_2025"]]

print(final_df.head())
final_df.to_csv("data/station_panel_2007_2017.csv", index=False)
print("✅ Saved → data/station_panel_2007_2017.csv")

import pandas as pd, re

EXCEL_PATH = "data/multi-year-station-entry-and-exit-figures.xls"
xls = pd.ExcelFile(EXCEL_PATH, engine="xlrd")

def norm(s):
    return str(s).strip().lower().replace("\n"," ").replace("  "," ")

# Which sheets will we try?
candidate_sheets = [sh for sh in xls.sheet_names
                    if re.search(r"20\d{2}", sh) and "entry" in sh.lower()]
print("Candidate sheets:", candidate_sheets)

frames = []
for sh in candidate_sheets:
    # --- detect header row: look for "Station" in first ~30 rows
    prev = pd.read_excel(xls, sheet_name=sh, nrows=30, header=None, engine="xlrd")
    header_row = None
    for i in range(len(prev)):
        row_vals = [norm(v) for v in prev.iloc[i].tolist()]
        if any(v == "station" for v in row_vals):
            header_row = i
            break

    df_y = pd.read_excel(xls, sheet_name=sh, header=header_row, engine="xlrd") \
            if header_row is not None else pd.read_excel(xls, sheet_name=sh, engine="xlrd")

    df_y = df_y.rename(columns={c: norm(c) for c in df_y.columns})
    cols = list(df_y.columns)
    # find columns
    station_col = next((c for c in cols if c.startswith("station")), None)

    # separate or combined
    entries_col = next((c for c in cols if c == "entries" or c.startswith("entries ")), None)
    exits_col   = next((c for c in cols if c == "exits"   or c.startswith("exits ")),   None)
    combined_col = next((c for c in cols if re.search(r"entries.*(&|and).*exits", c)), None)
    if not combined_col:
        # TfL often uses "entries and exits (millions)"
        combined_col = next((c for c in cols if "entries" in c and "exits" in c), None)

    if not station_col or (not combined_col and not (entries_col and exits_col)):
        print(f"⚠️  {sh} skipped. header_row={header_row} | columns={cols[:8]}")
        continue

    if combined_col:
        df_y["entries_exits"] = pd.to_numeric(df_y[combined_col], errors="coerce")
    else:
        df_y["entries_exits"] = pd.to_numeric(df_y[entries_col], errors="coerce") + \
                                pd.to_numeric(df_y[exits_col],   errors="coerce")

    out = df_y[[station_col, "entries_exits"]].rename(columns={station_col:"station"}).copy()
    # Extract the year from the sheet name
    year = int(re.search(r"(20\d{2})", sh).group(1))
    if 2007 <= year <= 2017:
        out["year"] = year
        frames.append(out)
    else:
        print(f"ℹ️  {sh} has year outside 2007–2017")

print(f"Collected frames: {len(frames)}")

import pandas as pd, re

EXCEL_PATH = "data/multi-year-station-entry-and-exit-figures.xls"
xls = pd.ExcelFile(EXCEL_PATH, engine="xlrd")

def norm(s):
    return str(s).strip().lower().replace("\n"," ").replace("  "," ")

frames = []

for sh in xls.sheet_names:
    # pick sheets like "2017 Entry & Exit"
    m = re.search(r"(20\d{2})", sh)
    if not (m and "entry" in sh.lower()):
        continue
    year = int(m.group(1))
    if not (2007 <= year <= 2017):
        continue

    # header is around row 6 in your file; still detect it robustly
    preview = pd.read_excel(xls, sheet_name=sh, nrows=30, header=None, engine="xlrd")
    header_row = None
    for i in range(len(preview)):
        if any(norm(v) == "station" for v in preview.iloc[i].tolist()):
            header_row = i
            break

    df_y = pd.read_excel(xls, sheet_name=sh, header=header_row, engine="xlrd")
    df_y = df_y.rename(columns={c: norm(c) for c in df_y.columns})
    cols = list(df_y.columns)

    # Required: station column
    sta

import pandas as pd, re

EXCEL_PATH = "data/multi-year-station-entry-and-exit-figures.xls"
xls = pd.ExcelFile(EXCEL_PATH, engine="xlrd")

def norm(s):
    return str(s).strip().lower().replace("\n"," ").replace("  "," ")

frames = []

for sh in xls.sheet_names:
    # pick sheets like "2017 Entry & Exit"
    m = re.search(r"(20\d{2})", sh)
    if not (m and "entry" in sh.lower()):
        continue
    year = int(m.group(1))
    if not (2007 <= year <= 2017):
        continue

    # detect header row (look for 'Station' keyword)
    preview = pd.read_excel(xls, sheet_name=sh, nrows=30, header=None, engine="xlrd")
    header_row = None
    for i in range(len(preview)):
        if any(norm(v) == "station" for v in preview.iloc[i].tolist()):
            header_row = i
            break

    df_y = pd.read_excel(xls, sheet_name=sh, header=header_row, engine="xlrd")
    df_y = df_y.rename(columns={c: norm(c) for c in df_y.columns})
    cols = list(df_y.columns)

    # find columns
    station_col = next((c for c in cols if c.startswith("station")), None)
    annual_col = next((c for c in cols if "annual" in c), None)

    if not station_col:
        print(f"⚠️  {sh}: no 'station' column. First cols: {cols[:10]}")
        continue

    if annual_col:
        df_y["entries_exits"] = pd.to_numeric(df_y[annual_col], errors="coerce")
    else:
        # fallback: sum weekday, saturday, sunday
        day_cols = [c for c in cols if any(k in c for k in ["weekday", "saturday", "sunday"])]
        if not day_cols:
            print(f"⚠️  {sh}: no annual or day columns. First cols: {cols[:10]}")
            continue
        df_y["entries_exits"] = df_y[day_cols].apply(pd.to_numeric, errors="coerce").sum(axis=1)

    out = df_y[[station_col, "entries_exits"]].rename(columns={station_col: "station"}).copy()
    out["year"] = year
    frames.append(out)

# combine
if len(frames) == 0:
    raise ValueError("No data frames collected. Check column names above.")

panel = pd.concat(frames, ignore_index=True)
panel["station_norm"] = panel["station"].astype(str).str.strip().str.lower()

print("✅ Panel created.")
print("Rows:", len(panel))
print("Years included:", sorted(panel['year'].unique()))
panel.head()

# Load Task 2 results
lines = pd.read_csv("data/line_stations.csv")
lines.columns = [c.strip().lower() for c in lines.columns]
lines["station_norm"] = lines["station_name"].astype(str).str.strip().str.lower()

# Merge
lines_2025 = (
    lines.groupby("station_norm")["line_name"]
         .agg(lambda x: sorted(set(x)))
         .reset_index()
         .rename(columns={"line_name": "which_lines_2025"})
)
lines_2025["n_lines_2025"] = lines_2025["which_lines_2025"].apply(len)

final_df = panel.merge(lines_2025, on="station_norm", how="left")
final_df = final_df[["station", "year", "entries_exits", "n_lines_2025", "which_lines_2025"]]

final_df.to_csv("data/station_panel_2007_2017.csv", index=False)
print("✅ Saved → data/station_panel_2007_2017.csv")
print(final_df.head())

from google.colab import files
uploaded = files.upload()

import os, shutil
os.makedirs("data", exist_ok=True)
shutil.move("line_stations.csv", "data/line_stations.csv")

!ls data

import pandas as pd

lines = pd.read_csv("data/line_stations.csv")
lines.columns = [c.strip().lower() for c in lines.columns]
lines["station_norm"] = lines["station_name"].astype(str).str.strip().str.lower()

lines_2025 = (
    lines.groupby("station_norm")["line_name"]
         .agg(lambda x: sorted(set(x)))
         .reset_index()
         .rename(columns={"line_name": "which_lines_2025"})
)
lines_2025["n_lines_2025"] = lines_2025["which_lines_2025"].apply(len)

final_df = panel.merge(lines_2025, on="station_norm", how="left")
final_df = final_df[["station", "year", "entries_exits", "n_lines_2025", "which_lines_2025"]]

final_df.to_csv("data/station_panel_2007_2017.csv", index=False)

print("✅ Final dataset saved → data/station_panel_2007_2017.csv")
print("Rows:", len(final_df))
final_df.head()

files.download("data/station_panel_2007_2017.csv")